version: 2.1

# Use executor to define docker image
executors:
  use-node:
    docker:
      - image: circleci/node:13.8.0
  use-python:
    docker:
      - image: python:3.11-rc-alpine
  use-aws:
    docker:
      - image: amazon/aws-cli

# Define commands to reuse
commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks and Infra
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople Backend stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
      - run:
          name: Destroy udapeople Frontend stack and S3 bucket
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
              TERM: xterm-256color

# Revert when deploy fail
  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here   
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          working_directory: ./backend
          command: |
              npm run migrations:revert

jobs:
  # Install dependency for backend
  install-backend:
    executor: use-node
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules

  # Install dependency for frontend
  install-frontend:
   executor: use-node
   steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules

  build-backend:
    executor: use-node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build
          working_directory: ./backend
          command: npm run build
            # Your code here
            # exit 1
            
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist

  test-backend:
    executor: use-node
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./backend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./backend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./backend/test_results
      - store_artifacts:
          path: ./backend/test_results

  build-frontend:
    executor: use-node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build
          working_directory: ./frontend
          command: exit 1
            # Your code here
            # npm run build           

  test-frontend:
    executor: use-node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./frontend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./frontend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results

  scan-frontend:
    executor: use-node
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check Frontend against security vulnerabilities
          command: |
            cd backend
            npm install
            # npm audit fix --audit-level=critical --force
            # npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    executor: use-node
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check Backend against security vulnerabilities
          command: | 
            cd backend
            npm install
            # npm audit fix --audit-level=critical --force
            # npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    executor: use-aws
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Deploy backend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}
      - run:
          name: Deploy frontend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              # --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
              # --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" \
              # --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}
              exit 1
      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --output text >> inventory
            cat inventory
            exit 1
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
      # Here's where you will add some code to rollback on failure 
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
          when: on_fail

  configure-infrastructure:
    executor: use-python
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["e8:0e:77:6f:43:d0:2d:f7:ec:d1:63:8a:b5:76:60:68"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            # apk add --update ansible
            # ansible --version
            exit 1
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            # pwd &&
            # ls -la
            # cat inventory
            # ansible-playbook -i inventory configure-server.yml -vvv
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure 
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
          when: on_fail

  run-migrations:
    executor: use-node
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update 
            sudo apt-get install awscli
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm run migrations > migration
      # Here's where you will add some code to rollback on failure 
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
          when: on_fail

  deploy-frontend:
    executor: use-node
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Rebuild frontend with backend API Url
          working_directory: ./frontend
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            npm run build
      - run:
          name: Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      # Here's where you will add some code to rollback on failure
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
          when: on_fail

  deploy-backend:
    executor: use-python
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["e8:0e:77:6f:43:d0:2d:f7:ec:d1:63:8a:b5:76:60:68"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            cat inventory
            ansible-playbook -i inventory deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
          when: on_fail

  smoke-test:
    executor: use-python
    steps:
       # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --output text)
            export API="http://${BACKEND_IP}:3030"
            echo "${API}"
            if curl "${API}/api/status" | grep "ok"
            then
              exit 1
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          working_directory: ./backend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:5}.s3-website.us-east-1.amazonaws.com/index.html"
            curl -s ${URL} | grep -q "Welcome"
      # Here's where you will add some code to rollback on failure 
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
          when: on_fail

  cloudfront-update:
    executor: use-aws
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Store old WorkflowID in memstash for cleanup phase
          working_directory: ./.circleci/files
          command: |
            aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text >> old_workflow_id.txt
            cat old_workflow_id.txt         
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name udapeople-cloudfront-production \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:5}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
          when: on_fail

  cleanup:
    executor: use-aws
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Clean up old environment
          working_directory: ./.circleci/files
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:5}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 

            if [[ "${CIRCLE_WORKFLOW_ID:0:5}" != "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=${CIRCLE_WORKFLOW_ID:0:5} => delete version exist"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            else
              echo "$OldWorkflowID==${CIRCLE_WORKFLOW_ID:0:5} => this is new version"
            fi
          environment:
            TERM: xterm-256color

workflows:
  default:
    jobs:
      - install-backend

      - install-frontend

      - build-backend:
          requires:
            - install-backend

      - build-frontend:
          requires:
            - install-frontend

      - test-backend:
          requires:
            - build-backend

      - test-frontend:
          requires:
            -  build-frontend

      - scan-backend:
          requires:
            - test-backend

      - scan-frontend:
          requires:
            - test-frontend

      - deploy-infrastructure:
          requires: [scan-frontend,scan-backend]
          filters:
            branches:
              only:
                - main

      - configure-infrastructure:
          requires:
            - deploy-infrastructure

      - run-migrations:
          requires:
            - test-backend
            - test-frontend
            - scan-backend
            - scan-frontend
            - configure-infrastructure
          filters:
            branches:
              only:
                - main

      - deploy-backend:
          requires:
            - run-migrations

      - deploy-frontend:
          requires:
            - run-migrations
            
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend

      - cloudfront-update:
          requires:
            - smoke-test

      - cleanup:
          requires:
            - cloudfront-update